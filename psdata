# Replace with your Workspace ID
#how to get customer id cmmand: Get-AzOperationalInsightsWorkspace -ResourceGroupName RG_name -Name <loganalyticalworkspace name>
$CustomerId = "aaa80e01-5ff8-4186-90b1-1262a9ba2c6c"  

# Replace with your Primary Key
#command: Get-AzOperationalInsightsWorkspaceSharedKey -ResourceGroupName demo -Name testlaws01
$SharedKey = "VuxyVL6CnyvetJUP/euWrwfDaA/6ZK1tbqax/BSO+4dyKIfJSurVCD5PeMQ+SfUnXd4Q3+Eqh9UNpsEPVTzPmg=="

# Specify the name of the record type that you'll be creating
$LogType = "StorageSync02"

# You can use an optional field to specify the timestamp from the data. If the time field is not specified, Azure Monitor assumes the time is the message ingestion time
$TimeStampField = ""


# Create two records with the same set of properties to create


$process = Get-AzStorageAccount  | select StorageAccountName,ResourceGroupName,@{Label="sku";Expression={$_.Sku.Name}} | Where-Object {$_.Sku -eq "Standard_RAGRS"} | foreach-object{
    $temvar = Get-AzStorageAccount -ResourceGroupName $_.ResourceGroupName -Name $_.StorageAccountName -IncludeGeoReplicationStats | select StorageAccountName, @{Label="synctime";Expression={$_.GeoReplicationStats.LastSyncTime}} , `
    @{Label="Status";Expression={$_.GeoReplicationStats.Status}} , `
    @{Label="CanFailover";Expression={$_.GeoReplicationStats.CanFailover}}

    @{
"StorageAccountName" = "StorageAccountName1";
"LastSynctime" = "2020-10-27T20:00:00.625Z";
"Failover" = "True";

}


}
$bodi1 = @"
[{  "storageaccount": "stoaccn3",  
    "lastsynctime": 3.4,
    "Canfailover": "True"
},
{    "storageaccount": "stoaccn4",
    "lastsynctime": 2,
    "Canfailover": "True"
}]
"@



write-host $bodi1
$json = $process | ConvertTo-Json -Compress

write-host $json
# Create the function to create the authorization signature
Function Build-Signature ($customerId, $sharedKey, $date, $contentLength, $method, $contentType, $resource)
{
    $xHeaders = "x-ms-date:" + $date
    $stringToHash = $method + "`n" + $contentLength + "`n" + $contentType + "`n" + $xHeaders + "`n" + $resource

    $bytesToHash = [Text.Encoding]::UTF8.GetBytes($stringToHash)
    $keyBytes = [Convert]::FromBase64String($sharedKey)

    $sha256 = New-Object System.Security.Cryptography.HMACSHA256
    $sha256.Key = $keyBytes
    $calculatedHash = $sha256.ComputeHash($bytesToHash)
    $encodedHash = [Convert]::ToBase64String($calculatedHash)
    $authorization = 'SharedKey {0}:{1}' -f $customerId,$encodedHash
    return $authorization
}


# Create the function to create and post the request
Function Post-LogAnalyticsData($customerId, $sharedKey, $body, $logType)
{
    $method = "POST"
    $contentType = "application/json"
    $resource = "/api/logs"
    $rfc1123date = [DateTime]::UtcNow.ToString("r")
    $contentLength = $body.Length
    $signature = Build-Signature `
        -customerId $customerId `
        -sharedKey $sharedKey `
        -date $rfc1123date `
        -contentLength $contentLength `
        -method $method `
        -contentType $contentType `
        -resource $resource
    $uri = "https://" + $customerId + ".ods.opinsights.azure.com" + $resource + "?api-version=2016-04-01"

    $headers = @{
        "Authorization" = $signature;
        "Log-Type" = $logType;
        "x-ms-date" = $rfc1123date;
        "time-generated-field" = $TimeStampField;
    }

    $response = Invoke-WebRequest -Uri $uri -Method $method -ContentType $contentType -Headers $headers -Body $body -UseBasicParsing
    return $response.StatusCode

}

# Submit the data to the API endpoint
Post-LogAnalyticsData -customerId $customerId -sharedKey $sharedKey -body ([System.Text.Encoding]::UTF8.GetBytes($bodi1)) -logType $logType
==================================




 $lagtime = (get-date).ToUniversalTime() -  $temvar.synctime 

$jsonobj = [pscustomobject]@{
        StorageAccountName = $temvar.StorageAccountName
        Lag = $lagtime.TotalMinutes
       

    }

$json = $jsonobj | ConvertTo-Json -Compress
#Post-LogAnalyticsData -customerId $customerId -sharedKey $sharedKey -body ([System.Text.Encoding]::UTF8.GetBytes($json)) -logType $logType




=================================================


Get-AzStorageAccount  | select id,StorageAccountName,ResourceGroupName,@{Label="sku";Expression={$_.Sku.Name}} | Where-Object {$_.Sku -eq "Standard_RAGRS"} | foreach-object{
    $temvar = Get-AzStorageAccount -ResourceGroupName $_.ResourceGroupName -Name $_.StorageAccountName -IncludeGeoReplicationStats | select id, StorageAccountName, @{Label="synctime";Expression={$_.GeoReplicationStats.LastSyncTime}} , `
    @{Label="Status";Expression={$_.GeoReplicationStats.Status}} , `
    @{Label="CanFailover";Expression={$_.GeoReplicationStats.CanFailover}}

   $subid = $temvar.id -split('/')
 $lagtime = (get-date).ToUniversalTime() -  $temvar.synctime 

$jsonobj = [pscustomobject]@{
        StorageAccountName = $temvar.StorageAccountName
        Lag = $lagtime.TotalMinutes
       Subname = (Get-AzSubscription -SubscriptionId $subid[2] | select -ExpandProperty Name)
    }
    
    ++++++++++++++++++++++++
    Get-AzKeyVault | ForEach-Object {
 Get-AzKeyVaultSecret -VaultName $_.VaultName }


